# -*- coding: utf-8 -*-
"""InvertedIndex(4).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T8Q10TVIvsf9Npbm1OGVfKM2gAYIBtem
"""

# Mapper function
def mapper(doc_id, text):
    # Tokenize the text into words using regular expression
    words = re.findall(r"[\w']+", text)
    for word in words:
        yield (word, doc_id)  # Emit each word and its associated document ID

# Reducer function
def reducer(word, doc_ids):
    doc_ids = list(set(doc_ids))  # Remove duplicates in the list of document IDs
    doc_ids.sort()  # Sort document IDs for readability
    yield (word, ", ".join(doc_ids))  # Emit the word and the list of document IDs as a string

# Read input data from a file
input_file = "InvertedIndex(4)_Input.txt"
input_data = []

with open(input_file, "r") as file:
    input_data = file.readlines()

# Map and Reduce
inverted_index = {}
for i, line in enumerate(input_data):
    doc_id = f"Document {i + 1}"  # Assign a document ID to each line
    for word, doc_id in mapper(doc_id, line):
        if word not in inverted_index:
            inverted_index[word] = []
        inverted_index[word].append(doc_id)

result = {}
for word, doc_ids in inverted_index.items():
    for word, doc_id_list in reducer(word, doc_ids):
        result[word] = doc_id_list

# Print the output
for word, doc_id_list in result.items():
    print(f'"{word}" {doc_id_list}')